
import { customAlphabet } from 'nanoid';
import AuthCheck from '../../components/AuthCheck';
import { doc, setDoc, getDoc } from "firebase/firestore";
import { db, auth } from '../../lib/firebase';

export default function NewExperimentPage({}) {

  return (
    <AuthCheck>
      <div>
        <h1>Create a New Experiment</h1>
        <input type="text" id="title" placeholder="Experiment Title" />
        <input type="text" id="osf-repo" placeholder="Parent OSF Repo" />
        <input type="text" id="osf-component-name" placeholder="OSF Component Name" />
        <button onClick={handleCreateExperiment}>Create</button>
      </div>
    </AuthCheck>
  );
}

async function handleCreateExperiment(){

  const user = auth.currentUser;
  const title = document.querySelector('#title').value;
  const osfRepo = document.querySelector('#osf-repo').value;
  const osfComponentName = document.querySelector('#osf-component-name').value;

  //e.preventDefault();
  console.log("Creating experiment");
  const nanoid = customAlphabet('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 12);
  const id = nanoid();

  try {
    const userdoc = await getDoc(doc(db, `users/${user.uid}`));
    let osfToken = null;
    if (userdoc.exists()) {
      osfToken = userdoc.data().osfToken;
    }
      
    const osfResult = await fetch(`https://api.osf.io/v2/nodes/${osfRepo}/children/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${osfToken}`,
      },
      body: JSON.stringify({
        data: {
          type: 'nodes',
          attributes: {
            title: osfComponentName,
            category: 'data',
            description: "This node was autogenerated by OSF Relay (https://osf-relay.vercel.app/)",
          }
        }
      })
    });

    const nodeData = await osfResult.json();
    console.log(nodeData);

    await setDoc(doc(db, `users/${user.uid}/experiments/${id}`), {
      title: title,
      active: false,
      id: id,
      osfRepo: nodeData.data.id,
    });
  } catch (error) {
    console.log(error);
  }
  
}