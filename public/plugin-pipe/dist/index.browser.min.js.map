{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"pipe\",\n  parameters: {\n    /**\n     * The 12-character experiment ID provided by pipe.jspsych.org.\n     */\n    experiment_id: {\n      type: ParameterType.STRING,\n      default: undefined,\n    },\n    /**\n     * The action to take. Can be `\"save\"`, `\"saveBase64\"`, or `\"condition\"`.\n     * If `\"save\"`, the data will be saved to the OSF.\n     * If `\"saveBase64\"`, the data should be a base64-encoded string and will be decoded to binary before being saved to the OSF.\n     * If `\"condition\"`, this will get the next condition for the experiment and save it in the data for this trial.\n     */\n    action: {\n      type: ParameterType.STRING,\n      default: undefined,\n    },\n    /**\n     * Name of the file to create on the OSF. It should include the extension.\n     * If the file already exists, no data will be saved.\n     */\n    filename: {\n      type: ParameterType.STRING,\n      default: null,\n    },\n    /**\n     * A string-based representation of the data to save.\n     *\n     * To save JSON, you can use `()=>jsPsych.data.get().json()`.\n     * To save CSV, you can use `()=>jsPsych.data.get().csv()`.\n     *\n     * The use of a function is necessary to get the updated data at\n     * the time of saving.\n     */\n    data_string: {\n      type: ParameterType.STRING,\n      default: null,\n    },\n\n    /**\n     * A string-based representation of the metadata to save if such metadata is not available for the experiment,\n     * passed as a dynamic parameter.\n     */\n    metadataOptions: {\n      type: ParameterType.OBJECT,\n      default: null,\n    },\n\n    /**\n     * An html message to be displayed above the loading graphics in the experiment during data save.\n     */\n    wait_message:{\n      type: ParameterType.HTML_STRING,\n      default: `<p>Saving data. Please do not close this page.</p>`\n    }\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **jsPsychPipe**\n *\n * This plugin facilitates communication with DataPipe (https://pipe.jspsych.org), a tool for\n * sending data from jsPsych experiments to the OSF (https://osf.io/). You will need a DataPipe\n * account to use this plugin.\n *\n * @author Josh de Leeuw\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\n */\nclass PipePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    this.run(display_element, trial);\n  }\n\n  private async run(display_element: HTMLElement, trial: TrialType<Info>) {\n    // show circular progress bar\n    const progressCSS = `\n\n      div.message {\n        font-size: 25px;\n        position: relative;\n        bottom: 100px;\n      }\n      .spinner {\n        animation: rotate 2s linear infinite;\n        z-index: 2;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin: -25px 0 0 -25px;\n        width: 50px;\n        height: 50px;\n      }\n        \n      .spinner .path {\n        stroke: rgb(25,25,25);\n        stroke-linecap: round;\n        animation: dash 1.5s ease-in-out infinite;\n      }\n\n      @keyframes rotate {\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n      \n      @keyframes dash {\n        0% {\n          stroke-dasharray: 1, 150;\n          stroke-dashoffset: 0;\n        }\n        50% {\n          stroke-dasharray: 90, 150;\n          stroke-dashoffset: -35;\n        }\n        100% {\n          stroke-dasharray: 90, 150;\n          stroke-dashoffset: -124;\n        }\n      }\n    `;\n\n    const progressHTML = `\n      <div class=message>${trial.wait_message}</div>\n      <style>${progressCSS}</style>\n      <svg class=\"spinner\" viewBox=\"0 0 50 50\">\n        <circle class=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"5\"></circle>\n      </svg>`;\n\n    display_element.innerHTML = progressHTML;\n\n    let result: any;\n    if (trial.action === \"save\") {\n      result = await PipePlugin.saveData(trial.experiment_id, trial.filename, trial.data_string, trial.metadataOptions);\n    }\n    if (trial.action === \"saveBase64\") {\n      result = await PipePlugin.saveBase64Data(\n        trial.experiment_id,\n        trial.filename,\n        trial.data_string,\n        //trial.metadata_string - has to be added\n      );\n    }\n    if (trial.action === \"condition\") {\n      result = await PipePlugin.getCondition(trial.experiment_id);\n    }\n\n\n    display_element.innerHTML = \"\";\n\n    // data saving\n    var trial_data = {\n      result: result,\n      success: result.error ? false : true,\n    };\n\n    // end trial\n    this.jsPsych.finishTrial(trial_data);\n  }\n\n  /**\n   * Save data to the OSF using pipe.jspsych.org.\n   *\n   * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n   * @param filename A unique filename to save the data to. It should include the extension.\n   * @param data The data as a string. Any text-basd format (e.g., JSON, CSV, TXT) is acceptable.\n   * @returns The response from the server.\n   */\n  static async saveData(expID: string, filename: string, data: string, options = null): Promise<any> {\n    if (!expID || !filename || !data) {\n      throw new Error(\"Missing required parameter(s).\");\n    }\n    let response: Response;\n    try {\n      response = await fetch(\"http://127.0.0.1:5005/api/data/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"*/*\",\n        },\n        body: JSON.stringify({\n          experimentID: expID,\n          filename: filename,\n          data: data,\n          options: options\n        }),\n      });\n    } catch (error) {\n      return error;\n    }\n    return await response.json();\n  }\n\n  /**\n   * Save base64-encoded data to the OSF using pipe.jspsych.org.\n   *\n   * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n   * @param filename A unique filename to save the data to. It should include the extension.\n   * @param data The data as a base64-encoded string. It will be decoded by the server before being stored in the OSF.\n   * @returns The response from the server.\n   */\n  static async saveBase64Data(expID: string, filename: string, data: string): Promise<any> {\n    if (!expID || !filename || !data) {\n      throw new Error(\"Missing required parameter(s).\");\n    }\n    let response: Response;\n    try {\n      response = await fetch(\"http://127.0.0.1:5005/api/base64/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"*/*\",\n        },\n        body: JSON.stringify({\n          experimentID: expID,\n          filename: filename,\n          data: data,\n        }),\n      });\n    } catch (error) {\n      return error;\n    }\n    return await response.json();\n  }\n\n  /**\n   * Get the condition assignment for the current participant using pipe.jspsych.org.\n   *\n   * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n   * @returns The condition assignment as an integer.\n   */\n  static async getCondition(expID: string): Promise<any> {\n    if (!expID) {\n      throw new Error(\"Missing required parameter(s).\");\n    }\n    let response: Response;\n    try {\n      response = await fetch(\"http://127.0.0.1:5005/api/condition/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"*/*\",\n        },\n        body: JSON.stringify({\n          experimentID: expID,\n        }),\n      });\n    } catch (error) {\n      return error;\n    }\n    const result = await response.json();\n    return result.condition;\n  }\n}\n\nexport default PipePlugin;"],"names":["info","name","parameters","experiment_id","type","ParameterType","STRING","default","undefined","action","filename","data_string","metadataOptions","OBJECT","wait_message","HTML_STRING","PipePlugin","jsPsych","_classCallCheck","this","key","value","expID_1","filename_1","data_1","__awaiter","arguments","expID","data","options","length","_regeneratorRuntime","mark","_callee2","response","wrap","_context2","prev","next","Error","fetch","method","headers","Accept","body","JSON","stringify","experimentID","sent","t0","abrupt","json","stop","_context3","_callee3","_context4","result","condition","_callee4","display_element","trial","run","progressHTML","concat","innerHTML","_context","saveData","saveBase64Data","getCondition","trial_data","success","error","finishTrial","_callee"],"mappings":"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"}